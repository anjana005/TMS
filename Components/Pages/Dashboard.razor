@page "/"
@using TMS.Data
@using TMS.Service
@inject TaskDataService taskDataService
@attribute [StreamRendering]

<h1 class="text-3xl font-semibold text-purple-900">Task Dashboard</h1>

@if (taskData == null)
{
        <p><em>Loading..............................</em></p>
}
else
{
        <div class="grid grid-cols-3 gap-4">
            @foreach (var status in statusList)
                {
                    <div class="bg-gray-200 h-100 p-4 rounded shadow">
                        <h2 class="text-md text-gray-600 font-semibold mb-4">@status</h2>
                        @foreach (var task in taskData.Where(t => t.Status == status))
                            {
                            <div class="max-w-sm rounded overflow-hidden shadow-lg mb-4">
                                <div class="px-4 py-1 max-h-16 w-full bg-purple-900 text-white text-lg rounded">
                                    @task.Title
                                </div>
                                <div class="px-4 py-4">
                                <p class="text-gray-700 text-base">
                                    @task.Description
                                </p>
                                </div>
                                <div class="px-4 pt-4 pb-1">
                                    <span class="inline-block bg-gray-200 rounded-full py-1 text-sm font-semibold text-gray-700 mr-2 mb-2">#Due Date: @task.DueDate.ToString().Split(" ")[0]</span>
                                </div>
                            </div>
                            }
                    </div>
                }
        </div>
}

@code {
    List<string> statusList = new List<string> { "To Do", "In Progress", "Completed"};
    List<TaskData> taskData = new List<TaskData>();

    protected override async Task OnInitializedAsync()
    {
        taskData = await Task.Run(() => taskDataService.GetAllTaskDatas());
    }
}
